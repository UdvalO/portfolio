{
  "hash": "a6df8da26f7835a5aaea1369c1bb2518",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Practice\"\ndate: \"2024-07-01\"\ncategories: [R]\nimage: \"pokemon.png\"\n---\n\n\n\n## Various R Assignments for Practice\n\nThrough the course \"Becoming Fluent in Data and Beyond,\" I completed five assignments focused on honing my R skills rather than performing in-depth analysis. These assignments provided hands-on experience with various data types, including time-series, geospatial, panel data, and webscrapping. Here I am sharing some of my favourite plots and analysis showcasing different skills.\n\n### Analysis of ViaRun event at the Viadrina University\n\nThis practice provided valuable experience in working with time-series data, converting text data types into time format, and identifying implausible recordings.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(tidyverse)\n\n# Load data\nViaRun_10_05_2023 <- readxl::read_xlsx(\"ViaRun_10_05_2023.xlsx\")\n\n# Convert time string to POSIXct object and extract minutes and seconds (adjusted for the mistake)\nViaRun_10_05_2023 <- ViaRun_10_05_2023 %>%\n  mutate(time = as.POSIXct(Zeit, format = \"%Y-%m-%d %H:%M:%S\"),\n         Minutes = hour(time),\n         Secs = minute(time))\n\n# Convert Minutes and Secs to a time object\nViaRun_10_05_2023 <- ViaRun_10_05_2023 %>% \n  mutate(Time_Fixed = as.POSIXct(paste0(\"00:\", Minutes, \":\", Secs), format = \"%H:%M:%S\"))\n\n# Filter out rows with NA in Time_Fixed column\nViaRun_10_05_2023 <- ViaRun_10_05_2023 %>%\n  filter(!is.na(Time_Fixed))\n\n# Filter Implausible Records\nimplausible_recording <- ViaRun_10_05_2023 %>%\n    filter(Time_Fixed <= as.POSIXct(\"00:13:07\", format = \"%H:%M:%S\"))\n\n# Filter everything below 10 minutes\nViaRun_10_05_2023 <- ViaRun_10_05_2023 %>%\n    filter(Time_Fixed >= as.POSIXct(\"00:10:00\", format = \"%H:%M:%S\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nViaRun_10_05_2023 %>%\n  filter(Gender != \"divers\") %>%\n  group_by(Gender) %>%\n  ggplot(aes(x = Time_Fixed, fill = Gender)) +\n    geom_density(alpha = 0.5, color = \"NA\") +\n    labs(title = \"Density Plot of Time by Gender\",\n       x = \"Time\", y = \"Density\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n## Analysis of Pokemon players in Germany\n\nThis was a good practice to work with geospatial data and creating interactive map. Pokemon GO gameplay data was used to plot players' behavior in Germany including frequency and movement.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load libraries\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(sf)\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\n\n# Load Data\nGameData <- read_delim(\"GameplayLocationHistory.tsv\")\n\n# Rename the columns\nGameData <- GameData %>%\n  rename(\n    lat = `Latitude of location reported by game`,\n    lon = `Longitude of location reported by game`)\n\n# Convert the GameData to a spatial object\ngeodata_sf <- st_as_sf(GameData, coords = c(\"lon\", \"lat\"), crs = 4326)\n\n# Load country boundaries using rnaturalearth\nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Filter for Germany\ngermany_boundary <- world %>% \n                    filter(admin == \"Germany\")\n\n# Perform a spatial join to filter points within Germany\ngermany_points <- st_join(geodata_sf, germany_boundary, join = st_within)\n\n\n# Extract lon and lat from geometry column\ngermany_points <- germany_points %>%\n  st_coordinates() %>%\n  as.data.frame() %>%\n  rename(\n    lon = X,\n    lat = Y) %>%\n  bind_cols(germany_points %>% select(-geometry))\n\n# extracting only needed columns\ngermany_points <- germany_points %>% \n  select(1:3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(viridis)\n\n# Calculating start, end date and max date\nstart_date <- min(as.Date(germany_points$`Date and Time`, format = \"%Y-%m-%d\"), na.rm = TRUE)\nend_date <- max(as.Date(germany_points$`Date and Time`, format = \"%Y-%m-%d\"), na.rm = TRUE)\nmax_days <- as.numeric(difftime(end_date, start_date, units = \"days\"))\n\n# Calculating the number of days each location has been recorded\ngermany_points_map <- germany_points %>%\n  mutate(\n    `Date and Time` = as.Date(`Date and Time`),\n    days_recorded = as.numeric(difftime(`Date and Time`, start_date, units = \"days\")))\n\n# Define color palette with viridis\ncolor_palette <- colorNumeric(\n  palette = viridis(7),\n  domain = c(0, 20, 40, 60, 80, 100, 120)\n)\n\n# Create the interactive map\nleaflet(germany_points_map) %>%\n  addTiles() %>%\n  addCircleMarkers(\n    ~lon, ~lat,\n    color = ~color_palette(days_recorded),\n    radius = 3,\n    fillOpacity = 0.8,\n    popup = ~paste(\"Days Recorded:\", days_recorded),\n    label = ~paste0(germany_points$`Date and Time`, \" (Days since start: \", days_recorded, \")\")\n  ) %>%\n  addLegend(\n    \"bottomright\",\n    pal = color_palette,\n    values = ~days_recorded,\n    title = paste(\"Days Since Start:\", \n                  paste(\"Start:\", format(start_date, \"%Y-%m-%d\")),\n                  paste(\"End:\", format(end_date, \"%Y-%m-%d\")),\n                  sep = \"<br>\"),\n    opacity = 1,\n    labFormat = labelFormat(transform = function(x) x)\n  ) %>% \n  \n# Setting the view fixed to Berlin\nsetView(lng = 13.4050, lat = 52.5200, zoom = 6)\n```\n:::\n\n\n\n## Analysis of most expensive paintings in history\n\nHere, I have scrapped a table from a [Wikipedia page](https://en.wikipedia.org/wiki/List_of_most_expensive_paintings#Progression_of_highest_prices_paid) and cleaned and used the scrapepd to analyze relationships between variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(readr)\n\n# URL of the website to scrape\nurl <- \"https://en.wikipedia.org/wiki/List_of_most_expensive_paintings#Progression_of_highest_prices_paid\"\n\npage <- read_html(url)\n\ndf_wp <- page %>% \n  html_element(\"table\") %>% \n  html_table(header = TRUE)\n\npaintings <- data.frame(df_wp)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv(\"paintings_df.csv\")\n\n# Selecting only needed columns\ndf <- df %>% \n  select(1, 3, 5, 6, 7)\n\n# Renaming columns required\ndf <- df %>% \n  rename(\n    Price = 1,\n    Date = 5\n  )\n\n# Cleaning Price column\ndf <- df %>%\n  mutate(Price_cleaned = Price) %>%  \n  mutate(Price_cleaned = str_replace(Price_cleaned, \"~\", \"\")) %>%\n  mutate(Price_cleaned = str_replace(Price_cleaned, \"\\\\+\", \"\")) %>% \n  mutate(Price_cleaned = str_replace(Price_cleaned, \"\\\\$\", \"\")) %>%\n  mutate(Price_cleaned = str_trim(Price_cleaned)) %>%\n  mutate(Price_cleaned = as.numeric(Price_cleaned))\n\n# taking earleir year for ranged years\ndf <- df %>%\n  mutate(Year_cleaned = case_when(\n    # Handle years with shorthand end dates (e.g., 1904-07)\n    str_detect(Year, \"\\\\d{4}-\\\\d{2}\") ~ as.numeric(str_extract(Year, \"\\\\d{4}\")),\n    # If there's a dash or slash, take the first 4-digit number\n    str_detect(Year, \"-|/\") ~ as.numeric(str_extract(Year, \"\\\\d{4}\")),\n    # If it starts with \"c.\", take the 4-digit number\n    str_starts(Year, \"c\\\\.\") ~ as.numeric(str_extract(Year, \"\\\\d{4}\")),\n    # Otherwise, extract any 4-digit number\n    TRUE ~ as.numeric(str_extract(Year, \"\\\\d{4}\"))\n  ))\n\n# filtering out for final cleaned df\ndf <- df %>%\n  select(-1, -4, -5)\n```\n:::\n\n\nSince the Wikipedia page did not provide the artist's age at the time of painting or at death. I merged another table containing this information to analyze the correlation between the price of the paintings and both the artists' ages at death and their ages at the time of painting.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot3 <- df %>%\n  filter(Price_cleaned > 150)\n\n# built based on previous table, containing data above 150m USD\ndf3 <- read_csv(\"above_150.csv\")\n\nplot3$age_at_painting <- df3$Age.at.Painting\nplot3$age_at_death <- df3$Age.at.Death\n\nggplot(plot3, aes(x = age_at_painting, y = Price_cleaned)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", span = 0.8, se = FALSE, color = \"blue\") +\n  scale_x_continuous(breaks = seq(0, max(plot3$age_at_death), by = 20)) + \n  theme_minimal() +\n  labs(\n    title = \"List of Most Expensive Paintings\",\n    subtitle = \"Paintings over 150 million USD\",\n    x = \"Age at Painting\",\n    y = \"Adjusted Auction Price in Millions USD\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}