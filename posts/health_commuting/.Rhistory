# Filtering out the years only relevant to the research questions
combined_df <- combined_df %>%
filter(age >= 18 & age <= 65, syear >= 2015 & syear <= 2020)
# sick days are recorded for the previous year, hence shifting the values to the previous year so the relationship with other variables can be analyzed without lag in the data.
combined_df <- combined_df %>%
mutate(syear = as.numeric(syear)) %>%
mutate(sick_days_LY = as.numeric(sick_days_LY)) %>%
group_by(pid) %>%
arrange(pid, syear) %>%
# Create the previous year variable
mutate(sick_days_PY = dplyr::lead(sick_days_LY, n = 1)) %>%
# Fill NA values with the most recent non-NA value
fill(sick_days_PY, .direction = "up") %>%
# Ungroup
ungroup() %>%
# 2020 was pulled only for the reason to get 2019 sick days, hence it can be filtered out
filter(syear != 2020)
setwd("C:/Users/udwal/Documents/Studies_Viadrina/Becoming Data Fluent/Fluent2024/Final Project")
# Getting individual data from pl
soep_df <- read_dta("pl.dta",
col_select = c(syear, ple0055, ple0046, ple0008, ple0072, plb0158, plb0592, pid, plb0471_h, plb0031_h, plb0022_h))
# Getting the individual data from pequiv that were not in pl
data_pequiv <- read_dta("pequiv.dta",
col_select = c(pid, syear, d11101, d11102ll))
# Joining the two dataset
combined_df <- soep_df %>%
full_join(data_pequiv, by = c("pid", "syear"))
# Converting negative labels into NA as preparation of data
combined_df[combined_df < 0] <- NA
# Renaming columns for ease of use
combined_df <- combined_df %>%
rename(
hospital_stays = ple0055,
sick_days_LY = ple0046,
health_state = ple0008,
doctor_visit_L3 = ple0072,
commute_km = plb0158,
commute_min = plb0592,
gender = d11102ll,
age = d11101,
income = plb0471_h,
job_change = plb0031_h,
employment_status = plb0022_h)
# Filtering out the years only relevant to the research questions
combined_df <- combined_df %>%
filter(age >= 18 & age <= 65, syear >= 2015 & syear <= 2020)
# sick days are recorded for the previous year, hence shifting the values to the previous year so the relationship with other variables can be analyzed without lag in the data.
combined_df <- combined_df %>%
mutate(syear = as.numeric(syear)) %>%
mutate(sick_days_LY = as.numeric(sick_days_LY)) %>%
group_by(pid) %>%
arrange(pid, syear) %>%
# Create the previous year variable
mutate(sick_days_PY = dplyr::lead(sick_days_LY, n = 1)) %>%
# Fill NA values with the most recent non-NA value
fill(sick_days_PY, .direction = "up") %>%
# Ungroup
ungroup() %>%
# 2020 was pulled only for the reason to get 2019 sick days, hence it can be filtered out
filter(syear != 2020)
# similar number of participants across the years
table(combined_df$syear)
# a majority of the participants' fist year is 2015 followed by 2017
combined_df %>%
group_by(pid) %>%
summarise(first_year = min(syear)) %>%
ggplot(aes(x=first_year)) + geom_histogram() +
theme_minimal() +
labs(title = "First Year of Interview per Persons")
# majority of the participants' last interview was in 2019
combined_df %>%
group_by(pid) %>%
summarise(last_year = max(syear)) %>%
ggplot(aes(x=last_year)) + geom_histogram() +
theme_minimal() +
labs(title = "Last Year of Interview per Persons")
#filtering unique IDs
unique_ids_df <- combined_df %>%
distinct(pid, .keep_all = TRUE)
distinct_count <- length(unique(combined_df$pid))
mean_age <- round(mean(combined_df$age), 1)
# calculating gender ratio
unique_ids_df$gender <- as.numeric(unique_ids_df$gender)
gender_counts <- unique_ids_df %>%
filter(!is.na(gender)) %>%
count(gender)
num_females <- gender_counts$n[gender_counts$gender == 2]
num_males <- gender_counts$n[gender_counts$gender == 1]
# Calculate gender ratio
gender_ratio <- round((num_females / num_males), 2)
# Age distribution
ggplot(unique_ids_df, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "#f89089", color = "white", alpha = 0.7) +
geom_vline(aes(xintercept = mean(age)), color = "#32b6b8", linetype = "dashed", size = 1) +
facet_wrap(~syear) +
labs(title = "Graph 1. Histogram of Age by Year",
x = "Age",
y = "Frequency") +
theme_minimal() +
theme(
strip.text = element_text(size = 12),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
plot.title = element_text(size = 14, face = "bold"))
# look at the percentage of unemployed and NAs each year
# Calculate the percentage of "Nicht erwerbstaetig" by year
combined_percentage_by_year <- unique_ids_df %>%
group_by(syear) %>%
summarize(
total = n(),
combined_count = sum(as_factor(employment_status) %in% c("[9] Nicht erwerbstaetig") |
is.na(employment_status),
na.rm = TRUE),
combined_percentage = round((combined_count / total) * 100, 2))
mean_percent <- round(mean(combined_percentage_by_year$Percent), 2)
# Rename columns for display in the table
colnames(combined_percentage_by_year) <- c("Year", "Total Participants", "Unemployed Count", "Percent")
kable(combined_percentage_by_year,
caption = "Table 1. Percentage of unemployed and NAs") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
row_spec(0, background = "#f9918a", color = "white", bold = TRUE)
# check unique job change labels
print(unique(as_factor(unique_ids_df$job_change)))
# count job changes in the year: about 11% changed job
job_change_count_by_year <- unique_ids_df %>%
group_by(syear) %>%
summarize(
total = n(),
ja_count = sum(as_factor(job_change) == "[1] Ja", na.rm = TRUE),
ja_percentage = (ja_count / total) * 100) %>%
arrange(syear)
# Print job change table
print(job_change_count_by_year)
# 3: Work-from-Home Status We have data on work-from-home (WFH) status only for the year 2020, with no records of WFH in previous years. Since 2020 is not the primary focus of this study, we assume that WFH was not an option during the years of interest. Consequently, we will exclude the WFH information from the dataset.
# 4: Removing outlieres in Income
ggplot(combined_df, aes(x = income)) +
geom_boxplot()
combined_df <- combined_df %>%
filter(income <= 15000)
# after filtering out unemployed participants and negative labels
combined_df$employment_status <- as.factor(combined_df$employment_status)
filtered_data <- combined_df %>%
filter(!is.na(employment_status) & employment_status != "[9] Nicht erwerbstaetig")
health_variables <- filtered_data %>%
filter(!is.na(sick_days_PY) & !is.na(hospital_stays) & !is.na(doctor_visit_L3) & !is.na(health_state)) %>%
mutate(across(c(hospital_stays, sick_days_LY, doctor_visit_L3, health_state), ~as.numeric(zap_labels(.))))
# plotting to see any outliers
long_df <- health_variables %>%
pivot_longer(cols = c(hospital_stays, doctor_visit_L3, sick_days_PY, health_state),
names_to = "variable",
values_to = "value")
ggplot(long_df, aes(x = variable, y = value)) +
geom_boxplot(fill = "#32b6b8", color = "#f78f88") +
facet_wrap(~variable, scales = "free_y", ncol = 1) +
theme_minimal() +
labs(title = "Graph 2. Distribution of Health-related Variables",
x = "",
y = "Value") +
theme(axis.text.x = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5))
# Calculate summary statistics for each variable
dv_summary <- summary(health_variables$doctor_visit_L3)
hos_summary <- summary(health_variables$hospital_stays)
sd_summary <- summary(health_variables$sick_days_PY)
hes_summary <- summary(health_variables$health_state)
# Combine the results into a data frame
summary_table <- data.frame(
Statistic = names(dv_summary),
Doctor_Visits_L3 = as.numeric(dv_summary),
Hospital_Stays = as.numeric(hos_summary),
Sick_Days_PY = as.numeric(sd_summary),
Health_Status = as.numeric(hes_summary))
# Create and display a table using gt
summary_table_gt <- summary_table %>%
gt() %>%
tab_header(
title = "Table 2. Summary Statistics for Health Variables") %>%
cols_label(
Statistic = "Statistic",
Doctor_Visits_L3 = "Doctor Visits (L3)",
Hospital_Stays = "Hospital Stays",
Sick_Days_PY = "Sick Days",
Health_Status = "Health Status") %>%
fmt_number(
columns = vars(Doctor_Visits_L3, Hospital_Stays, Sick_Days_PY, Health_Status),
decimals = 1) %>%
tab_style(
style = list(
cell_fill(color = "#f78f88"),
cell_text(weight = "bold", color = "white")),
locations = cells_column_labels(
columns = everything()))
# Print the gt table
summary_table_gt
# Trend over time by health variables
ggplot(long_df, aes(x = syear, y = value)) +
geom_line(size = 1, color = "#32b6b8") +
facet_wrap(~ variable, scales = "free_y", ncol = 2) +
labs(title = "Graph 3. Trend of Average Health Variables Over Time",
x = "Year",
y = "Average Value") +
theme_minimal() +
theme(strip.background = element_rect(fill = "#f9918a"),
strip.text = element_text(face = "bold", color = "white"))
#removing outliers left 16514 observations
filtered_data <- filtered_data %>%
filter(!is.na(sick_days_PY) & !is.na(health_state), sick_days_PY < 60) %>%
mutate(across(c(sick_days_PY, health_state), ~as.numeric(zap_labels(.))))
filtered_data <- filtered_data %>%
select(-hospital_stays, -doctor_visit_L3, -sick_days_LY)
# categorizing commute distance.
filtered_data <- filtered_data %>%
filter(commute_km <= 200) %>% # removing one outlier above 200 km
mutate(commute_category = case_when(
commute_km >= 0 & commute_km < 10  ~ "Non-commuter",
commute_km >= 10 & commute_km < 25 ~ "Short Distance",
commute_km >= 25 & commute_km < 50 ~ "Medium Distance",
commute_km >= 50                   ~ "Long Distance",
TRUE                               ~ NA_character_))
# average travel time by category of distance
mean_commute_by_category <- filtered_data %>%
group_by(commute_category) %>%
summarize(mean_commute_min = mean(commute_min, na.rm = TRUE)) %>%
mutate(mean_commute_min = round(mean_commute_min, 1)) %>%
rename(
"Commuter Type" = commute_category,
"Avg Commute Time (min)" = mean_commute_min) %>%
arrange(desc(`Avg Commute Time (min)`))
# just extracting the value
long_dist_time <- mean_commute_by_category %>%
filter(`Commuter Type` == "Long Distance") %>%
summarise(mean_travel_time = mean(`Avg Commute Time (min)`, na.rm = TRUE)) %>%
pull(mean_travel_time)
# just extracting the value
non_commuter_time <- mean_commute_by_category %>%
filter(`Commuter Type` == "Non-commuter") %>%
summarise(mean_travel_time = mean(`Avg Commute Time (min)`, na.rm = TRUE)) %>%
pull(mean_travel_time)
kable(mean_commute_by_category,
caption = "Table 3. Avg Commute Time by Commuter Type") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
row_spec(0, background = "#f9918a", color = "white", bold = TRUE)
# removing outlier in commute time before plotting relationship with commute distance
mean_min <- filtered_data %>%
summarize(mean = mean(commute_min, na.rm = TRUE)) %>%
pull(mean)
filtered_data <- filtered_data %>%
filter(commute_min < 150)
ggplot(filtered_data, aes(x = commute_km, y = commute_min)) +
geom_point(color = "#f9918a") +
theme_minimal() +
labs(title = "Graph 4. Relationship Between Commute Distance and Time", x = "Commute distance in km", y = "Commute time in minutes") +
geom_smooth(method = "loess", span = 0.8, se = FALSE, color = "#32b6b8")
filtered_data <- filtered_data %>%
mutate(pid = as_factor(pid)) %>%
mutate(pid = as.character(pid))
# each additional km traveled increases the commute time by approximately 1.15 minutes.
model_ME <- lmer(commute_min ~ commute_km - 1 + (1 | pid), data = filtered_data)
model_summary <- summary(model_ME)
coefficients_df <- as.data.frame(model_summary$coefficients)
colnames(coefficients_df) <- c("Estimate", "Std. Error", "t value")
# Display the coefficients with kable and apply styling
kable(coefficients_df, caption = "Table 4. Model Summary: Coefficients") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
row_spec(0, background = "#f9918a", color = "white", bold = TRUE)
# creating custom function
custom_summary <- function(x) {
# Calculate summary statistics
result <- c(
Mean = round(mean(x, na.rm = TRUE), 2),
SD = round(sd(x, na.rm = TRUE), 2),
Min = round(min(x, na.rm = TRUE), 2),
Max = round(max(x, na.rm = TRUE), 2))
return(result)}
# Compute summary statistics for each category
full_sample <- custom_summary(filtered_data$sick_days_PY)
full_sample_count <- nrow(filtered_data)
full_sample_percentage <- 100
non_commuter <- filtered_data %>%
filter(commute_category == "Non-commuter") %>%
pull(sick_days_PY) %>%
custom_summary()
short_distance <- filtered_data %>%
filter(commute_category == "Short Distance") %>%
pull(sick_days_PY) %>%
custom_summary()
medium_distance <- filtered_data %>%
filter(commute_category == "Medium Distance") %>%
pull(sick_days_PY) %>%
custom_summary()
long_distance <- filtered_data %>%
filter(commute_category == "Long Distance") %>%
pull(sick_days_PY) %>%
custom_summary()
# Number and percentage of participants by commuter category
number_commuter <- filtered_data %>%
group_by(commute_category) %>%
summarize(n = n(), .groups = 'drop') %>%
mutate(percentage = round((n / sum(n)) * 100, 2))
# Create a data frame for summary statistics
summary_stats <- data.frame(
Category = c("Full Sample", "Non-commuter", "Short Distance", "Medium Distance", "Long Distance"),
Mean = c(full_sample["Mean"], non_commuter["Mean"], short_distance["Mean"], medium_distance["Mean"], long_distance["Mean"]),
SD = c(full_sample["SD"], non_commuter["SD"], short_distance["SD"], medium_distance["SD"], long_distance["SD"]),
Min = c(full_sample["Min"], non_commuter["Min"], short_distance["Min"], medium_distance["Min"], long_distance["Min"]),
Max = c(full_sample["Max"], non_commuter["Max"], short_distance["Max"], medium_distance["Max"], long_distance["Max"]),
Count = c(full_sample_count,
number_commuter %>% filter(commute_category == "Non-commuter") %>% pull(n),
number_commuter %>% filter(commute_category == "Short Distance") %>% pull(n),
number_commuter %>% filter(commute_category == "Medium Distance") %>% pull(n),
number_commuter %>% filter(commute_category == "Long Distance") %>% pull(n)),
Percentage = c(full_sample_percentage,
number_commuter %>% filter(commute_category == "Non-commuter") %>% pull(percentage),
number_commuter %>% filter(commute_category == "Short Distance") %>% pull(percentage),
number_commuter %>% filter(commute_category == "Medium Distance") %>% pull(percentage),
number_commuter %>% filter(commute_category == "Long Distance") %>% pull(percentage)))
# Create the table using gt
table_gt <- summary_stats %>%
gt() %>%
tab_header(title = "Table 5. Summary Statistics of Sick Days by Commuter Category") %>%
fmt_number(columns = vars(Mean, SD, Min, Max, Count, Percentage), decimals = 2) %>%
fmt_number(columns = vars(Count), decimals = 0) %>%
cols_label(Category = "Commute Category",
Mean = "Mean",
SD = "SD",
Min = "Min",
Max = "Max",
Count = "Number of Participants",
Percentage = "Percentage (%)") %>%
tab_spanner(
label = "Summary Statistics",
columns = vars(Mean, SD, Min, Max)) %>%
cols_align(
align = "center",
columns = vars(Mean, SD, Min, Max, Count, Percentage)) %>%
fmt_markdown(
columns = vars(Category),
rows = which(!is.na(summary_stats$Count))) %>%
tab_style(
style = list(
cell_fill(color = "#f78f88"),
cell_text(weight = "bold", color = "white")),
locations = cells_column_labels(columns = everything())) %>%
tab_style(
style = list(
cell_fill(color = "#f78f88"),
cell_text(weight = "bold")),
locations = cells_column_spanners(spanners = "Summary Statistics"))
table_gt
# gender difference in commute distance and sick days
gender_labels <- c(
"1" = "Male",
"2" = "Female")
# Apply the mapping
filtered_data <- filtered_data %>%
mutate(gender_label = factor(gender, levels = names(gender_labels), labels = gender_labels), na.rm = TRUE) %>%
filter(!is.na(gender_label))
# commute distance histogram
ggplot(filtered_data, aes(x = commute_km, fill = gender_label)) +
geom_density(alpha = 0.8, color = "white") +
theme_minimal() +
labs(
title = "Graph 5. Commute Distance Distribution by Gender",
x = "Commute Distance (km)",
y = "Density",
fill = "Gender") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
# sick days histogram
ggplot(filtered_data, aes(sick_days_PY, fill = gender_label)) +
geom_density(alpha = 0.7, color = "white") +
theme_minimal() +
labs(
title = "Graph 6. Sickness Absence in Days",
x = "Sick Days",
y = "Density",
fill = "Gender") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
ggplot(filtered_data, aes(x = factor(health_state), y = commute_km)) +
geom_boxplot(color = "#f9918a") +
theme_minimal() +
labs(title = "Graph 7. Commute Distance by Health Status",
x = "Health Status",
y = "Commute Distance (km)") +
coord_cartesian(ylim = c(0, 100))
# commuter type by employment status
# giving English labels as the original is in German
employment_status_labels <- c(
"1" = "Full-time",
"2" = "Part-time",
"3" = "Ausbildung",
"4" = "Low-income earner",
"8" = "Workshop for handicapped")
# Apply the mapping
filtered_data <- filtered_data %>%
mutate(employment_status = factor(employment_status, levels = names(employment_status_labels), labels = employment_status_labels))
summarized_data <- filtered_data %>%
group_by(commute_category, employment_status) %>%
summarize(count = n(), .groups = 'drop')
ggplot(summarized_data, aes(x = employment_status, y = count, fill = commute_category)) +
geom_col(position = "stack") +
theme_minimal() +
labs(
title = "Graph 8. Employment Status by Commute Categories",
x = "Employment Status",
y = "Count",
fill = "Commute Category") +
scale_fill_manual(values = c("#80bcd2", "#f1dedb", "#f9918a", "#32b6b8", "#a7641c")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
# income and commuter type correlation: weak postive at cor = 0.19
cor_km_income <- cor(filtered_data$commute_km, filtered_data$income, use = "complete.obs")
ggplot(filtered_data, aes(x = commute_km, y = income)) +
geom_point(color = "#f9918a") +
geom_smooth(method = "loess", span = 0.8, se = FALSE, color = "#32b6b8") +
theme_minimal() +
labs(title = "Graph 9. Commute Distance and Income Correlation", x= "Commute Ditsance (km)", y = "Income")
Avg_km <- filtered_data %>%
group_by(syear) %>%
summarize(mean_km = round(mean(commute_km, na.rm = TRUE), 2))
filtered_data <- filtered_data %>%
select(-na.rm)
kable(Avg_km,
col.names = c("Year", "km"),
caption = "Table 6. Average Commute Distance") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
row_spec(0, background = "#f9918a", color = "white", bold = TRUE)
#Creating dummy variable for job change
filtered_data$job_change <- as.numeric(filtered_data$job_change)
filtered_data <- filtered_data %>%
mutate(job_change_dummy = ifelse(job_change == 1, 1, 0),
gender_dummy = ifelse(gender_label == "Male", 1, 0),
full_time_dummy = ifelse(employment_status == "Full-time", 1, 0))
# linear mixed-effects models fitting
# Prepare the data by scaling the continues variables
filtered_data <- filtered_data %>%
mutate(
commute_km_z = scale(commute_km),
age_z = scale(age),
income_z = scale(income),
syear_z = scale(syear))
# Model 1: Number of Days Off Work
model1 <- lmer(sick_days_PY ~ commute_km_z + gender_dummy + age_z + income_z +
job_change_dummy + full_time_dummy + syear_z + (1|pid),
data = filtered_data)
# Model 2: Current Health State
model2 <- lmer(health_state ~ commute_km_z + gender_dummy + age_z + income_z +
job_change_dummy + full_time_dummy + syear_z + (1|pid),
data = filtered_data)
# Check summaries
summary(model1)
summary(model2)
# tidying model result
fixed_effects1 <- tidy(model1, effects = "fixed")
fixed_effects2 <- tidy(model2, effects = "fixed")
# Creating result table
simple_table <- bind_rows(
fixed_effects1 %>% mutate(Model = "Model 1"),
fixed_effects2 %>% mutate(Model = "Model 2")) %>%
mutate(
Variable = case_when(
term == "commute_km_z" ~ "Commute Distance",
term == "gender_dummy" ~ "Gender",
term == "age_z" ~ "Age",
term == "income_z" ~ "Income",
term == "job_change_dummy" ~ "Job Change",
term == "full_time_dummy" ~ "Full-time Status",
term == "syear_z" ~ "Year",
term == "(Intercept)" ~ "Intercept"),
Effect = ifelse(statistic > 1.96 | statistic < -1.96,
ifelse(estimate > 0, "Increase", "Decrease"),
"No significant effect"),
Significance = ifelse(abs(statistic) > 3.291, "***",
ifelse(abs(statistic) > 2.576, "**",
ifelse(abs(statistic) > 1.96, "*", ""))),
`Relative Impact` = abs(estimate) / max(abs(estimate))) %>%
select(Model, Variable, Effect, Significance, `Relative Impact`) %>%
arrange(Model, desc(`Relative Impact`))
# Display the table
kable(simple_table, format = "html", escape = FALSE, caption = "Table 7. Mixed Effect Model Summary") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
column_spec(5, width = "100px",
color = "white",
background = spec_color(simple_table$`Relative Impact`, end = 0.7)) %>%
row_spec(0, background = "#f9918a", color = "white", bold = TRUE) %>%
row_spec(9, extra_css = "border-top: 2px solid black;")
# a maority of the participants' fist year is 2015 followed by 2017
combined_df %>%
group_by(pid) %>%
summarise(first_year = min(syear)) %>%
ggplot(aes(x=first_year)) + geom_histogram() +
theme_minimal() +
labs(title = "First Year of Interview per Persons")
# majority of the participants' last interview was in 2019
combined_df %>%
group_by(pid) %>%
summarise(last_year = max(syear)) %>%
ggplot(aes(x=last_year)) + geom_histogram() +
theme_minimal() +
labs(title = "Last Year of Interview per Persons")
# similar number of participants across the years
table(combined_df$syear)
kable(job_change_count_by_year)
ggplot(combined_df, aes(x = income)) +
geom_boxplot()
summary(model1)
summary(model2)
